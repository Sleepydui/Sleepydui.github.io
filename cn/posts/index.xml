<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>中文博客 on Xinyue-page</title><link>https://Sleepydui.github.io/cn/posts/</link><description>Recent content in 中文博客 on Xinyue-page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Feb 2023 15:36:57 +0800</lastBuildDate><atom:link href="https://Sleepydui.github.io/cn/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>关于文本数据降维投影的思考</title><link>https://Sleepydui.github.io/cn/2023/02/07/%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E6%8A%95%E5%BD%B1%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Tue, 07 Feb 2023 15:36:57 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/07/%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E6%8A%95%E5%BD%B1%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>文本数据是我在可视化研究中最常使用的数据类型
俄乌新闻可视化画contour的时候我曾用过TF-IDF与PCA 但其实不明白背后的原理 而且contour的效果并不好（1）overlap太多（2）stopword并没有过滤掉太多没有实际意义的词导致聚类含义不明 在阅读wiki时，我发现lab的习惯是先用降维投影观察一下数据 如media bias （http://vis.pku.edu.cn/wiki/doku.php?id=visgroup:projects:biasvis:data） PCA（Principal Component Analysis）
使用 PCA 算法的步骤如下： 用TfidfVectorizer() 对输入的文本数据进行特征提取，生成特征矩阵vectors 然后，使用 PCA（Principal Component Analysis）算法对特征矩阵 vectors 进行降维，降维后的结果存储在 vectorspca 中。n_components 参数代表降维后的维数，即将特征矩阵降维为 2 维。 PCA 算法是一种常用的降维算法，它的原理是在保证数据的总方差不变的情况下，对数据进行线性变换，使得变换后的数据具有最大的方差。这样，在降维的同时，尽量保留原始数据的信息。 因此，PCA 降维是通过找到数据的主成分，以尽可能保证数据总方差不变的情况下降低数据维数来实现降维的。 T-SNE (t-Distributed Stochastic Neighbor Embedding)
T-SNE是一种高维数据的降维算法，可以帮助我们将高维的数据降到低维，并且保持数据之间的相似性关系。 它的使用方法很简单，我们只需要提供原始的高维数据和降维后的维数，T-SNE 就可以计算出一个新的低维数据，并且用这个低维数据来可视化原始数据。 T-SNE 的一个重要依据是数据之间的相似性关系，它通过计算数据间的近邻关系来生成降维数据，从而可以更好地呈现数据的分布。 T-SNE 计算相似性的原理基于两个假设：数据之间的相似性关系以及低维数据的分布更加集中。 在原始的高维数据中，T-SNE 计算出数据之间的相似性，它将相似的数据映射到近邻关系，而不相似的数据映射到远离关系。 然后，T-SNE 在低维数据中重新计算数据之间的相似性，使得相似的数据仍然是近邻关系，而不相似的数据仍然是远离关系。最终，T-SNE 将低维数据放到二维或三维平面上，以可视化方式呈现数据分布。 通过这样的过程，T-SNE 可以保持原始数据中数据之间的相似性关系，并且使得低维数据的分布更加集中，从而更好地呈现数据的分布情况。 通常情况下，T-SNE 适用于处理非线性数据，因为它可以捕捉到数据之间的非线性关系。它在许多的数据分析场景中都有很好的应用，比如文本分类、图像分类、生物信息学等。 SVD（Singular Value Decomposition）算法是一种数学分解方法，它可以将一个矩阵分解为三个矩阵的乘积，分别是左奇异矩阵、奇异值矩阵和右奇异矩阵。</description></item><item><title>新学期第一次组会Takeaway</title><link>https://Sleepydui.github.io/cn/2023/02/01/%E6%96%B0%E5%AD%A6%E6%9C%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BC%9Atakeaway/</link><pubDate>Wed, 01 Feb 2023 15:41:42 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/01/%E6%96%B0%E5%AD%A6%E6%9C%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BC%9Atakeaway/</guid><description> 什么是有价值的可视化？
要比其他方法更有效，这个能这么做或者没人做不是必须要做的理由，但是要和其他已有的方法比，有显著的差异. 组内之前的研究为什么是有价值的？
我们为什么要做隐喻地图
因为本身信息的传播非常复杂， 有一些熟悉的隐喻方式，大家很容易接受 人有专门的空间认知区域，使得地图成为合理的隐喻方式 这其中存在几重关系
转发的关系 人之间的关注关系 语义的相互联系 我们为什么要做弹幕可视化
这其中存在几重关系
看视频的人和视频 看视频的人和看视频的人 和外界的关系 我的反思
之前提出的实体可视化关系不够复杂，只有语义上的联系 应该更深挖，更focus才有可能找到多重关系 要下笨功夫</description></item><item><title>Markdown 试水</title><link>https://Sleepydui.github.io/cn/2021/01/07/first-post-cn/</link><pubDate>Thu, 07 Jan 2021 13:42:27 -0500</pubDate><guid>https://Sleepydui.github.io/cn/2021/01/07/first-post-cn/</guid><description>如果好奇以下的内容是如何实现的，请参考本页源代码 。
第一级标题 第二级标题 第三级标题 第四级标题 第五级标题 第六级标题 列表 Water Water Water Water Water Water Water Water Water Water Water Water 表格 Water Water Water Water Water Water Water Water1 Water Water Water Water 引语 知之为知之，不知为不知，是知也2。 — 孔子
数学公式 最简单的如，$1 + 1 = 3$</description></item></channel></rss>