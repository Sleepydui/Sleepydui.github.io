<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Xinyue-page</title><link>https://Sleepydui.github.io/</link><description>Recent content in Home on Xinyue-page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Mar 2023 20:02:39 +0800</lastBuildDate><atom:link href="https://Sleepydui.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Vuestructure</title><link>https://Sleepydui.github.io/cn/2023/03/01/vuestructure/</link><pubDate>Wed, 01 Mar 2023 20:02:39 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/03/01/vuestructure/</guid><description> Vue实现原理 配</description></item><item><title>“Vue3安装Element-ui"</title><link>https://Sleepydui.github.io/cn/2023/02/28/vue3%E5%AE%89%E8%A3%85element-ui/</link><pubDate>Tue, 28 Feb 2023 19:50:22 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/28/vue3%E5%AE%89%E8%A3%85element-ui/</guid><description> 关于npm install element-ui 报错的问题 情境是在ancientvis中，用到了element-ui中的el-popover 弹出框 我下载以后打算写这个模块显示未安装依赖 报错为：“npm ERR! ERESOLVE unable to resolve dependency tree” 这个错误表明在解析依赖树时遇到了问题。 Element-ui 2.15.13 要求 Vue 的对等版本为 ^2.5.17，但是我的项目中安装的 Vue 版本为 3.2.47。 解决方案：尝试升级 Element-ui：升级 Element-ui 到与 Vue 3 兼容的版本（例如 Element-ui 3 或 Element Plus） 然后在我的应用程序中使用 Element Plus 具体来说，是在我的 main.js 或 app.js 文件中引入 Element Plus，并在 Vue 实例中注册 Element Plus 组件。 具体使用的el-button等语法稍有区别，需要查文档</description></item><item><title>2023 02 28 Vipclass</title><link>https://Sleepydui.github.io/cn/2023/02/28/2023-02-28-vipclass/</link><pubDate>Tue, 28 Feb 2023 09:28:08 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/28/2023-02-28-vipclass/</guid><description> 关于网页请求
post请求参数通常放在body或者载荷中 get 请求参数通常放在query中 html?= 将嵌入在网页中的JavaScript代码放到Node.js中解析，有以下几个优点
减轻客户端负担：将JavaScript代码从客户端移到服务器端，可以减轻客户端的负担，因为客户端不再需要解析和执行这些代码。这可以提高页面加载速度和响应速度，从而提高用户体验。 代码复用：在服务器端和客户端使用相同的JavaScript代码，可以避免在两个环境中重复编写代码，从而提高开发效率和代码质量。 数据处理：Node.js提供了强大的数据处理能力，可以轻松处理从客户端提交的数据，比如表单提交、AJAX请求等，这些数据可以在服务器端进行验证、处理和存储。 访问数据库：Node.js可以轻松访问各种数据库，包括关系型数据库和非关系型数据库，可以通过JavaScript代码进行数据库操作，从而简化了数据的访问和处理。 总之，将嵌入在网页中的JavaScript代码放到Node.js中解析，可以提高页面加载速度、减轻客户端负担、提高代码复用率、提供强大的数据处理能力和访问数据库的能力，从而提高开发效率和代码质量。 为什么要使用数据库，如mysql
高效性：数据库使用高效的算法和数据结构，可以快速地查询和检索大量数据。 数据共享：数据库可以为多个应用程序提供访问数据的权限，使得不同的应用程序可以共享同一份数据。 安全性：数据库可以提供访问控制和数据加密等安全功能，保护数据的机密性和完整性。 感谢qsjzkadnpy提供的技术支持，♥️</description></item><item><title>Boxofficevis尝试爬ENdata</title><link>https://Sleepydui.github.io/cn/2023/02/25/boxofficevis%E5%B0%9D%E8%AF%95%E7%88%ACendata/</link><pubDate>Sat, 25 Feb 2023 16:22:14 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/25/boxofficevis%E5%B0%9D%E8%AF%95%E7%88%ACendata/</guid><description> HTML 与 XPath
鼠标右键选中某个元素，选择【检查】，就能看到该元素的HTML文档 如何在HTML文档中找到想要的数据？XPath是最常用的语言 使用火狐浏览器的TryPath插件，可以检查想要的数据 在插件的Expression框中输入表达式 //td[@class=“&amp;quot;] 就能找到所有日期了 XPath都有相似的结构，由三部分组成
标签 属性 / 标签：html body ul li div p a 连接标签的符号：/ // /：用绝对路径定位 //：用相对路径定位 属性和属性值：[@id=&amp;lsquo;subject_list&amp;rsquo;] [@class=&amp;lsquo;next&amp;rsquo;] XPath通过HTML标签和属性查找数据 XPath的常用函数
text() 用文本定位位置 text()=&amp;lsquo;xxx&amp;rsquo;精确定位，引号中的内容需与HTML文档中的文本完全一样 XPath为：//a[text()=&amp;lsquo;后页&amp;gt;'] contains(text(),&amp;lsquo;xxx&amp;rsquo;) 模糊定位，HTML文档中的文本，包含引号中的内容即可 XPath为：//a[contains(text(),&amp;lsquo;后页&amp;gt;')] contains() 用于判断文本的一部分是否包含XXX，或者属性值是否包含XXX contains(text(),&amp;lsquo;xxx&amp;rsquo;) 判断文本的一部分是否包含XXX contains(@class,&amp;lsquo;xxx&amp;rsquo;) 判断属性值是否包含XXX XPath为：//li[@class=&amp;lsquo;subject-item&amp;rsquo;] position() 用于定位节点的位置和限制节点的范围 position()=1 同级标签的第1个 position()&amp;gt;1 and position()&amp;lt;10 同级标签的第2-9个 常用于控制循环列表的项 //ul[@class=&amp;lsquo;subject-list&amp;rsquo;]/li[position()&amp;gt;1 and position()&amp;lt;10]定位的是第2-9个li标签 last() 最后1个 last() 最后1个标签 //ul[@class=&amp;lsquo;subject-list&amp;rsquo;]/li[last()]，定位的是最后1个li标签 last()-1 倒数第2个标签 last()-2 倒数第3个标签 and/or/not 同时满足/满足其中1个即可/无 and 且，同时满足 a[@class and @href] 既有class属性，又有href属性的a标签 or 或，满足其中1个即可 a[@class or @href] 有class属性，或者有href属性的a标签 not 无 a[not(@class)] 不含class属性的a标签 following-sibling:: 选取当前节点之后的所有同级节点 //span[@class=&amp;ldquo;thisclass&amp;rdquo;]/following-sibling::a 定位到span节点之后的所有同级a节点 preceding-sibling:: 选取当前节点之前的所有同级节点 //a[@target='_blank&amp;rsquo;]/preceding-sibling::strong ，定位到a节点之前的所有同级strong节点</description></item><item><title>[摸鱼]尝试在博客中引入网易云音乐模块</title><link>https://Sleepydui.github.io/cn/2023/02/15/%E6%91%B8%E9%B1%BC%E5%B0%9D%E8%AF%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%BC%95%E5%85%A5%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 15 Feb 2023 15:41:42 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/15/%E6%91%B8%E9%B1%BC%E5%B0%9D%E8%AF%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%BC%95%E5%85%A5%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%A8%A1%E5%9D%97/</guid><description>尝试在博客中引入网易云音乐模块 网易云日推有点懂啊，成功入选骑车BGM； 在图书馆三层把耳机开到最大声，于是世界安静下来。
顺便再尝试下Markdown引语吧 拈杯酒眯着眼，说专心看人间 看长安建安与潘安都想沾一沾 神仙掐指算，此去少圆满 得来失，聚了散，千万莫求全
再抄首元曲，
好花须买，皓月须赊。花倚栏干看烂熳开，月曾把酒问团圆夜。月有盈亏花有开谢，想人生最苦离别。
聚散有时，古今谁能圆满？夜阑风静，俯仰荡尽余波。 滚去写代码了！今晚有玩飞花令的兴致了。</description></item><item><title>[Debug]关于GitHub中下载的vue工程无法打开的问题</title><link>https://Sleepydui.github.io/cn/2023/02/14/debug%E5%85%B3%E4%BA%8Egithub%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84vue%E5%B7%A5%E7%A8%8B%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 14 Feb 2023 17:59:02 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/14/debug%E5%85%B3%E4%BA%8Egithub%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84vue%E5%B7%A5%E7%A8%8B%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>command not found问题
从GitHub中下载的vue工程用npm run serve无法打开 npm run serve后报错vue-cli-service:command not found command not found方法
排查全局环境问题——我自己的工程文件是可以用npm run serve打开的 排查文件夹node_modules问题 最终解决方法 rm -rf node_modules #删除GitHub中下载下来的node_modules文件夹 npm cache clean &amp;ndash;force #清除缓冲 npm install #重新安装 感谢chaofan对本文的贡献
0228更新Permission denied问题
从GitHub中下载的vue工程用npm run serve无法打开 报错/node_modules/.bin/vue-cli-service: Permission denied Permission denied方法
原因：缺少执行权限：尝试执行的文件可能没有足够的权限来在终端中运行。 最终解决方法 chmod -R 777 ./ chmod 是 change mode 的缩写，用于更改文件或目录的权限； -R 是递归标志，表示将权限更改应用于目录及其子目录中的所有文件和目录； 777 是权限模式，表示赋予所有用户（包括所有者、所有者所在的组和其他用户）读、写、执行的权限； .</description></item><item><title>[博士生手记]博士生每天怎么安排科研和作息才能保证身心健康愉悦呢？</title><link>https://Sleepydui.github.io/cn/2023/02/12/%E5%8D%9A%E5%A3%AB%E7%94%9F%E6%89%8B%E8%AE%B0%E5%8D%9A%E5%A3%AB%E7%94%9F%E6%AF%8F%E5%A4%A9%E6%80%8E%E4%B9%88%E5%AE%89%E6%8E%92%E7%A7%91%E7%A0%94%E5%92%8C%E4%BD%9C%E6%81%AF%E6%89%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E6%84%89%E6%82%A6%E5%91%A2/</link><pubDate>Sun, 12 Feb 2023 13:40:51 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/12/%E5%8D%9A%E5%A3%AB%E7%94%9F%E6%89%8B%E8%AE%B0%E5%8D%9A%E5%A3%AB%E7%94%9F%E6%AF%8F%E5%A4%A9%E6%80%8E%E4%B9%88%E5%AE%89%E6%8E%92%E7%A7%91%E7%A0%94%E5%92%8C%E4%BD%9C%E6%81%AF%E6%89%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E6%84%89%E6%82%A6%E5%91%A2/</guid><description> 来源：https://www.zhihu.com/question/318686582
方法
1、一定要有自己的节奏：每天的起床、睡觉时间最好都固定在某一时刻附近。 2、找到效率最高的黄金时段。用写作来找。 以前读一天文献，觉得自己不管什么时间段，效率都差不多，都挺投入的。结果换成写作才发现，上午思路最清晰，和其它时间段对比明显。那么起床后到午饭这段时间，就是我的黄金时段。这段时间里应该雷打不动做最重要的事，而不是拿来回邮件或者跟人瞎聊天。 3、任务一定要细分，但执行必须有弹性。 我觉得科研和应试学习最不同的地方在于，要学会自己度量和终点之间的距离，然后越来越准确地制定任务。每一个任务应该细化到看见就能立马执行的程度。执行过程里再调整、或者放弃。因为有时候，执行时可能发现，继续做下去并不那么对自己的课题有益，那么就可以放弃。放弃的时候知道for what，就行了。别苛责自己。 当你看到一个个可执行的任务展现在自己面前，最终铺成一条通往课题终点的路时，心里会十分笃定的。这时候今天学习8小时，还是明天学习9小时，都不那么重要了。不迷信每天一定要工作几小时，会扼杀灵感。 4、每天写小结，哪怕几十字，非常有用。 一天的研究结束后，我会习惯在计划本上写个简短的小结。主要是总结自己的时间使用情况。比如说，“写综述比想象中难，比预期多花了好久”，或者是“A老师的文献比较难懂，下次要留更多时间”，这样以后估算任务时间会越来越靠谱，也是增加科研确定性的一个小方法。 5、睡眠很重要，但运动不是。 运动肯定是好的，但科研压力大的时候，随心而为就好，不要反而成为负担。比如觉得每周一定要做几次有氧，几次无氧啥的。不想特意花时间运动，可以把2公里内的外出全部换成步行，自然而然运动量就有了。 做科研无非是知识管理和时间管理，把握好这两项，应该可以免除大部分焦虑。以上是针对后者的一些小小的个人感悟。 cr: 知乎 李清言​ 我的反思
找到开始做事的感觉很重要 睡眠和起床需要一个暗示，一个开关 每天每天写小结，评价每个小时都在做什么事，更高效地管理自己的时间 及时更新wiki，多与外界交流 坐校车及走路的碎片时间，要形成自己的workflow</description></item><item><title>关于文本数据降维投影的思考</title><link>https://Sleepydui.github.io/cn/2023/02/07/%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E6%8A%95%E5%BD%B1%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Tue, 07 Feb 2023 15:36:57 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/07/%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E6%8A%95%E5%BD%B1%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>文本数据是我在可视化研究中最常使用的数据类型
俄乌新闻可视化画contour的时候我曾用过TF-IDF与PCA 但其实不明白背后的原理 而且contour的效果并不好（1）overlap太多（2）stopword并没有过滤掉太多没有实际意义的词导致聚类含义不明 在阅读wiki时，我发现lab的习惯是先用降维投影观察一下数据 如media bias （http://vis.pku.edu.cn/wiki/doku.php?id=visgroup:projects:biasvis:data） PCA（Principal Component Analysis）
使用 PCA 算法的步骤如下： 用TfidfVectorizer() 对输入的文本数据进行特征提取，生成特征矩阵vectors 然后，使用 PCA（Principal Component Analysis）算法对特征矩阵 vectors 进行降维，降维后的结果存储在 vectorspca 中。n_components 参数代表降维后的维数，即将特征矩阵降维为 2 维。 PCA 算法是一种常用的降维算法，它的原理是在保证数据的总方差不变的情况下，对数据进行线性变换，使得变换后的数据具有最大的方差。这样，在降维的同时，尽量保留原始数据的信息。 因此，PCA 降维是通过找到数据的主成分，以尽可能保证数据总方差不变的情况下降低数据维数来实现降维的。 T-SNE (t-Distributed Stochastic Neighbor Embedding)
T-SNE是一种高维数据的降维算法，可以帮助我们将高维的数据降到低维，并且保持数据之间的相似性关系。 它的使用方法很简单，我们只需要提供原始的高维数据和降维后的维数，T-SNE 就可以计算出一个新的低维数据，并且用这个低维数据来可视化原始数据。 T-SNE 的一个重要依据是数据之间的相似性关系，它通过计算数据间的近邻关系来生成降维数据，从而可以更好地呈现数据的分布。 T-SNE 计算相似性的原理基于两个假设：数据之间的相似性关系以及低维数据的分布更加集中。 在原始的高维数据中，T-SNE 计算出数据之间的相似性，它将相似的数据映射到近邻关系，而不相似的数据映射到远离关系。 然后，T-SNE 在低维数据中重新计算数据之间的相似性，使得相似的数据仍然是近邻关系，而不相似的数据仍然是远离关系。最终，T-SNE 将低维数据放到二维或三维平面上，以可视化方式呈现数据分布。 通过这样的过程，T-SNE 可以保持原始数据中数据之间的相似性关系，并且使得低维数据的分布更加集中，从而更好地呈现数据的分布情况。 通常情况下，T-SNE 适用于处理非线性数据，因为它可以捕捉到数据之间的非线性关系。它在许多的数据分析场景中都有很好的应用，比如文本分类、图像分类、生物信息学等。 SVD（Singular Value Decomposition）算法是一种数学分解方法，它可以将一个矩阵分解为三个矩阵的乘积，分别是左奇异矩阵、奇异值矩阵和右奇异矩阵。</description></item><item><title>新学期第一次组会Takeaway</title><link>https://Sleepydui.github.io/cn/2023/02/01/%E6%96%B0%E5%AD%A6%E6%9C%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BC%9Atakeaway/</link><pubDate>Wed, 01 Feb 2023 15:41:42 +0800</pubDate><guid>https://Sleepydui.github.io/cn/2023/02/01/%E6%96%B0%E5%AD%A6%E6%9C%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BC%9Atakeaway/</guid><description> 什么是有价值的可视化？
要比其他方法更有效，这个能这么做或者没人做不是必须要做的理由，但是要和其他已有的方法比，有显著的差异. 组内之前的研究为什么是有价值的？
我们为什么要做隐喻地图
因为本身信息的传播非常复杂， 有一些熟悉的隐喻方式，大家很容易接受 人有专门的空间认知区域，使得地图成为合理的隐喻方式 这其中存在几重关系
转发的关系 人之间的关注关系 语义的相互联系 我们为什么要做弹幕可视化
这其中存在几重关系
看视频的人和视频 看视频的人和看视频的人 和外界的关系 我的反思
之前提出的实体可视化关系不够复杂，只有语义上的联系 应该更深挖，更focus才有可能找到多重关系 要下笨功夫</description></item><item><title>Markdown 试水</title><link>https://Sleepydui.github.io/cn/2021/01/07/first-post-cn/</link><pubDate>Thu, 07 Jan 2021 13:42:27 -0500</pubDate><guid>https://Sleepydui.github.io/cn/2021/01/07/first-post-cn/</guid><description>如果好奇以下的内容是如何实现的，请参考本页源代码 。
第一级标题 第二级标题 第三级标题 第四级标题 第五级标题 第六级标题 列表 Water Water Water Water Water Water Water Water Water Water Water Water 表格 Water Water Water Water Water Water Water Water1 Water Water Water Water 引语 知之为知之，不知为不知，是知也2。 — 孔子
数学公式 最简单的如，$1 + 1 = 3$</description></item><item><title>Markdown Testing</title><link>https://Sleepydui.github.io/en/2021/01/07/second-post/</link><pubDate>Thu, 07 Jan 2021 13:37:57 -0500</pubDate><guid>https://Sleepydui.github.io/en/2021/01/07/second-post/</guid><description>See the source code of this page if you are interested.
H1 H2 H3 H4 H5 H6 List Water Water Water Water Water Water Water Water Water Water Water Water Table Water Water Water Water Water Water Water Water1 Water Water Water Water Quotes What I cannot create, I do not understand2.</description></item></channel></rss>